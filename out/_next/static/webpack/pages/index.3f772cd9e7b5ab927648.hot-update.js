webpackHotUpdate_N_E("pages/index",{

/***/ "./lib/puck.js":
/*!*********************!*\
  !*** ./lib/puck.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* eslint-disable */\n\n/*\n --------------------------------------------------------------------\n Puck.js BLE Interface library\n Copyright 2016 Gordon Williams (gw@pur3.co.uk)\n --------------------------------------------------------------------\n This Source Code Form is subject to the terms of the Mozilla Public\n License, v. 2.0. If a copy of the MPL was not distributed with this\n file, You can obtain one at http://mozilla.org/MPL/2.0/.\n --------------------------------------------------------------------\n This creates a 'Puck' object that can be used from the Web Browser.\n\n Simple usage:\n\n Puck.write('LED1.set()\\n')\n\n Execute expression and return the result:\n\n Puck.eval('BTN.read()', function(d) {\n alert(d);\n });\n\n Or write and wait for a result - this will return all characters,\n including echo and linefeed from the REPL so you may want to send\n `echo(0)` and use `console.log` when doing this.\n\n Puck.write('1+2\\n', function(d) {\n alert(d);\n });\n\n Or more advanced usage with control of the connection\n - allows multiple connections\n\n Puck.connect(function(connection) {\n if (!connection) throw 'Error!';\n connection.on('data', function(d) { ... });\n connection.on('close', function() { ... });\n connection.write('1+2\\n', function() {\n connection.close();\n });\n });\n\n */\nvar Puck = function () {\n  var errorStr, errorURL;\n  if (typeof navigator == 'undefined') return;\n\n  function checkIfSupported() {\n    // Hack for windows\n    if (navigator.platform.indexOf('Win') >= 0 && (navigator.userAgent.indexOf('Chrome/54') >= 0 || navigator.userAgent.indexOf('Chrome/55') >= 0 || navigator.userAgent.indexOf('Chrome/56') >= 0)) {\n      console.warn('Chrome <56 in Windows has navigator.bluetooth but it\\'s not implemented properly');\n      if (confirm('Web Bluetooth on Windows is not yet available.\\nPlease click Ok to see other options for using Web Bluetooth')) window.location = 'https://www.espruino.com/Puck.js+Quick+Start';\n      return false;\n    }\n\n    if (navigator.bluetooth) return true;\n    console.warn('No Web Bluetooth on this platform');\n    var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n    if (iOS) {\n      if (confirm('To use Web Bluetooth on iOS you\\'ll need the WebBLE App.\\nPlease click Ok to go to the App Store and download it.')) {\n        window.location = 'https://itunes.apple.com/us/app/webble/id1193531073';\n      }\n    } else {\n      if (confirm('This Web Browser doesn\\'t support Web Bluetooth.\\nPlease click Ok to see instructions for enabling it.')) {\n        window.location = 'https://www.espruino.com/Puck.js+Quick+Start';\n      }\n    }\n\n    return false;\n  }\n\n  var NORDIC_SERVICE = '6e400001-b5a3-f393-e0a9-e50e24dcca9e';\n  var NORDIC_TX = '6e400002-b5a3-f393-e0a9-e50e24dcca9e';\n  var NORDIC_RX = '6e400003-b5a3-f393-e0a9-e50e24dcca9e';\n  var CHUNKSIZE = 16;\n\n  function log(level, s) {\n    if (puck.log) puck.log(level, s);\n  }\n\n  function ab2str(buf) {\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\n  }\n\n  function str2ab(str) {\n    var buf = new ArrayBuffer(str.length);\n    var bufView = new Uint8Array(buf);\n\n    for (var i = 0, strLen = str.length; i < strLen; i++) {\n      bufView[i] = str.charCodeAt(i);\n    }\n\n    return buf;\n  }\n\n  function connect(callback) {\n    if (!checkIfSupported()) return;\n    var connection = {\n      on: function on(evt, cb) {\n        this['on' + evt] = cb;\n      },\n      emit: function emit(evt, data) {\n        if (this['on' + evt]) this['on' + evt](data);\n      },\n      isOpen: false,\n      isOpening: true,\n      txInProgress: false\n    };\n    var btServer = undefined;\n    var btService;\n    var connectionDisconnectCallback;\n    var txCharacteristic;\n    var rxCharacteristic;\n    var txDataQueue = [];\n\n    connection.close = function () {\n      connection.isOpening = false;\n\n      if (connection.isOpen) {\n        connection.isOpen = false;\n        connection.emit('close');\n      } else {\n        if (callback) callback(null);\n      }\n\n      if (btServer) {\n        btServer.disconnect();\n        btServer = undefined;\n        txCharacteristic = undefined;\n        rxCharacteristic = undefined;\n      }\n    };\n\n    connection.write = function (data, callback) {\n      if (data) txDataQueue.push({\n        data: data,\n        callback: callback\n      });\n      if (connection.isOpen && !connection.txInProgress) writeChunk();\n\n      function writeChunk() {\n        var chunk;\n        if (!txDataQueue.length) return;\n        var txItem = txDataQueue[0];\n\n        if (txItem.data.length <= CHUNKSIZE) {\n          chunk = txItem.data;\n          txItem.data = undefined;\n        } else {\n          chunk = txItem.data.substr(0, CHUNKSIZE);\n          txItem.data = txItem.data.substr(CHUNKSIZE);\n        }\n\n        connection.txInProgress = true;\n        log(2, 'Sending ' + JSON.stringify(chunk));\n        txCharacteristic.writeValue(str2ab(chunk)).then(function () {\n          log(3, 'Sent');\n\n          if (!txItem.data) {\n            txDataQueue.shift(); // remove this element\n\n            if (txItem.callback) txItem.callback();\n          }\n\n          connection.txInProgress = false;\n          writeChunk();\n        })[\"catch\"](function (error) {\n          log(1, 'SEND ERROR: ' + error);\n          txDataQueue = [];\n          connection.close();\n        });\n      }\n    };\n\n    navigator.bluetooth.requestDevice({\n      filters: [{\n        namePrefix: 'Flask'\n      }, {\n        namePrefix: 'Espruino'\n      }, {\n        services: [NORDIC_SERVICE]\n      }],\n      optionalServices: [NORDIC_SERVICE]\n    }).then(function (device) {\n      log(1, 'Device Name:       ' + device.name);\n      log(1, 'Device ID:         ' + device.id); // Was deprecated: Should use getPrimaryServices for this in future\n\n      log('BT>  Device UUIDs:      ' + device.uuids);\n      device.addEventListener('gattserverdisconnected', function () {\n        log(1, 'Disconnected (gattserverdisconnected)');\n        connection.close();\n      });\n      return device.gatt.connect();\n    }).then(function (server) {\n      log(1, 'Connected');\n      btServer = server;\n      return server.getPrimaryService(NORDIC_SERVICE);\n    }).then(function (service) {\n      log(2, 'Got service');\n      btService = service;\n      return btService.getCharacteristic(NORDIC_RX);\n    }).then(function (characteristic) {\n      rxCharacteristic = characteristic;\n      log(2, 'RX characteristic:' + JSON.stringify(rxCharacteristic));\n      rxCharacteristic.addEventListener('characteristicvaluechanged', function (event) {\n        var value = event.target.value.buffer; // get arraybuffer\n\n        connection.emit('data', ab2str(value));\n      });\n      return rxCharacteristic.startNotifications();\n    }).then(function () {\n      return btService.getCharacteristic(NORDIC_TX);\n    }).then(function (characteristic) {\n      txCharacteristic = characteristic;\n      log(2, 'TX characteristic:' + JSON.stringify(txCharacteristic));\n    }).then(function () {\n      connection.txInProgress = false;\n      connection.isOpen = true;\n      connection.isOpening = false;\n      callback(connection);\n      connection.emit('open'); // if we had any writes queued, do them now\n\n      connection.write();\n    })[\"catch\"](function (error) {\n      log(1, 'ERROR: ' + error);\n      connection.close();\n    });\n    return connection;\n  }\n\n  ; // ----------------------------------------------------------\n\n  var connection;\n  /* convenience function... Write data, call the callback with data:\n   callbackNewline = false => if no new data received for ~0.5 sec\n   callbackNewline = true => after a newline */\n\n  function write(data, callback, callbackNewline) {\n    if (!checkIfSupported()) return;\n    var cbTimeout;\n\n    function onWritten() {\n      isWriting = false;\n\n      if (callback) {\n        if (callbackNewline) {\n          connection.cb = function (d) {\n            var newLineIdx = connection.received.indexOf('\\n');\n\n            if (newLineIdx >= 0) {\n              var l = connection.received.substr(0, newLineIdx);\n              connection.received = connection.received.substr(newLineIdx + 1);\n              connection.cb = undefined;\n              if (cbTimeout) clearTimeout(cbTimeout);\n              cbTimeout = undefined;\n              if (callback) callback(l);\n            }\n          };\n        } // wait for any received data if we have a callback...\n\n\n        var waitTime = 10;\n        var maxTime = waitTime;\n        cbTimeout = setTimeout(function timeout() {\n          cbTimeout = undefined;\n\n          if ((connection.hadData || maxTime == waitTime) && maxTime--) {\n            cbTimeout = setTimeout(timeout, 250);\n          } else {\n            connection.cb = undefined;\n            if (callback) callback(connection.received);\n            connection.received = '';\n          }\n\n          connection.hadData = false;\n        }, 250);\n      } else connection.received = '';\n    }\n\n    if (connection && (connection.isOpen || connection.isOpening)) {\n      if (!connection.txInProgress) connection.received = '';\n      return connection.write(data, onWritten);\n    }\n\n    connection = connect(function (puck) {\n      if (!puck) {\n        connection = undefined;\n        if (callback) callback(null);\n        return;\n      }\n\n      connection.received = '';\n      connection.on('data', function (d) {\n        connection.received += d;\n        connection.hadData = true;\n        if (connection.cb) connection.cb(d);\n      });\n      connection.on('close', function (d) {\n        connection = undefined;\n      });\n    });\n    connection.write(data, onWritten);\n  } // ----------------------------------------------------------\n\n\n  var puck = {\n    /// Are we writing debug information? 0 is no, 1 is some, 2 is more, 3 is all.\n    debug: 1,\n    /// Used internally to write log information - you can replace this with your own function\n    log: function log(level, s) {\n      if (level <= this.debug) console.log('<BLE> ' + s);\n    },\n\n    /** Connect to a new device - this creates a separate\n     connection to the one `write` and `eval` use. */\n    connect: connect,\n    /// Write to Puck.js and call back when the data is written.  Creates a connection if it doesn't exist\n    write: write,\n    /// Evaluate an expression and call cb with the result. Creates a connection if it doesn't exist\n    eval: function _eval(expr, cb) {\n      if (!checkIfSupported()) return;\n      write('\\x10Bluetooth.println(JSON.stringify(' + expr + '))\\n', function (d) {\n        if (d !== null) cb(JSON.parse(d));else cb(null);\n      }, true);\n    },\n    /// Did `write` and `eval` manage to create a connection?\n    isConnected: function isConnected() {\n      return connection !== undefined;\n    },\n    /// get the connection used by `write` and `eval`\n    getConnection: function getConnection() {\n      return connection;\n    },\n    /// Close the connection used by `write` and `eval`\n    close: function close() {\n      if (connection) connection.close();\n    }\n  };\n  return puck;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Puck);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL3B1Y2suanM/MjU1YiJdLCJuYW1lcyI6WyJQdWNrIiwiZXJyb3JTdHIiLCJlcnJvclVSTCIsIm5hdmlnYXRvciIsImNoZWNrSWZTdXBwb3J0ZWQiLCJwbGF0Zm9ybSIsImluZGV4T2YiLCJ1c2VyQWdlbnQiLCJjb25zb2xlIiwid2FybiIsImNvbmZpcm0iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImJsdWV0b290aCIsImlPUyIsInRlc3QiLCJNU1N0cmVhbSIsIk5PUkRJQ19TRVJWSUNFIiwiTk9SRElDX1RYIiwiTk9SRElDX1JYIiwiQ0hVTktTSVpFIiwibG9nIiwibGV2ZWwiLCJzIiwicHVjayIsImFiMnN0ciIsImJ1ZiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiVWludDhBcnJheSIsInN0cjJhYiIsInN0ciIsIkFycmF5QnVmZmVyIiwibGVuZ3RoIiwiYnVmVmlldyIsImkiLCJzdHJMZW4iLCJjaGFyQ29kZUF0IiwiY29ubmVjdCIsImNhbGxiYWNrIiwiY29ubmVjdGlvbiIsIm9uIiwiZXZ0IiwiY2IiLCJlbWl0IiwiZGF0YSIsImlzT3BlbiIsImlzT3BlbmluZyIsInR4SW5Qcm9ncmVzcyIsImJ0U2VydmVyIiwidW5kZWZpbmVkIiwiYnRTZXJ2aWNlIiwiY29ubmVjdGlvbkRpc2Nvbm5lY3RDYWxsYmFjayIsInR4Q2hhcmFjdGVyaXN0aWMiLCJyeENoYXJhY3RlcmlzdGljIiwidHhEYXRhUXVldWUiLCJjbG9zZSIsImRpc2Nvbm5lY3QiLCJ3cml0ZSIsInB1c2giLCJ3cml0ZUNodW5rIiwiY2h1bmsiLCJ0eEl0ZW0iLCJzdWJzdHIiLCJKU09OIiwic3RyaW5naWZ5Iiwid3JpdGVWYWx1ZSIsInRoZW4iLCJzaGlmdCIsImVycm9yIiwicmVxdWVzdERldmljZSIsImZpbHRlcnMiLCJuYW1lUHJlZml4Iiwic2VydmljZXMiLCJvcHRpb25hbFNlcnZpY2VzIiwiZGV2aWNlIiwibmFtZSIsImlkIiwidXVpZHMiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2F0dCIsInNlcnZlciIsImdldFByaW1hcnlTZXJ2aWNlIiwic2VydmljZSIsImdldENoYXJhY3RlcmlzdGljIiwiY2hhcmFjdGVyaXN0aWMiLCJldmVudCIsInZhbHVlIiwidGFyZ2V0IiwiYnVmZmVyIiwic3RhcnROb3RpZmljYXRpb25zIiwiY2FsbGJhY2tOZXdsaW5lIiwiY2JUaW1lb3V0Iiwib25Xcml0dGVuIiwiaXNXcml0aW5nIiwiZCIsIm5ld0xpbmVJZHgiLCJyZWNlaXZlZCIsImwiLCJjbGVhclRpbWVvdXQiLCJ3YWl0VGltZSIsIm1heFRpbWUiLCJzZXRUaW1lb3V0IiwidGltZW91dCIsImhhZERhdGEiLCJkZWJ1ZyIsImV2YWwiLCJleHByIiwicGFyc2UiLCJpc0Nvbm5lY3RlZCIsImdldENvbm5lY3Rpb24iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUEsSUFBSSxHQUFJLFlBQVk7QUFDdEIsTUFBSUMsUUFBSixFQUFjQyxRQUFkO0FBQ0EsTUFBSSxPQUFPQyxTQUFQLElBQW9CLFdBQXhCLEVBQXFDOztBQUVyQyxXQUFTQyxnQkFBVCxHQUE0QjtBQUN4QjtBQUNBLFFBQUlELFNBQVMsQ0FBQ0UsUUFBVixDQUFtQkMsT0FBbkIsQ0FBMkIsS0FBM0IsS0FBcUMsQ0FBckMsS0FDQ0gsU0FBUyxDQUFDSSxTQUFWLENBQW9CRCxPQUFwQixDQUE0QixXQUE1QixLQUE0QyxDQUE1QyxJQUNESCxTQUFTLENBQUNJLFNBQVYsQ0FBb0JELE9BQXBCLENBQTRCLFdB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QkFBWTtBQUN2QixhQUFPdEUsVUFBUDtBQUNILEtBM0JNO0FBNEJQO0FBQ0FnQixTQUFLLEVBQUUsaUJBQVk7QUFDZixVQUFJaEIsVUFBSixFQUNJQSxVQUFVLENBQUNnQixLQUFYO0FBQ1A7QUFoQ00sR0FBWDtBQWtDQSxTQUFPakMsSUFBUDtBQUNILENBM1JZLEVBQWI7O0FBNlJleEIsbUVBQWYiLCJmaWxlIjoiLi9saWIvcHVjay5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG4vKlxuIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gUHVjay5qcyBCTEUgSW50ZXJmYWNlIGxpYnJhcnlcbiBDb3B5cmlnaHQgMjAxNiBHb3Jkb24gV2lsbGlhbXMgKGd3QHB1cjMuY28udWspXG4gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpc1xuIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG4gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiBUaGlzIGNyZWF0ZXMgYSAnUHVjaycgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgZnJvbSB0aGUgV2ViIEJyb3dzZXIuXG5cbiBTaW1wbGUgdXNhZ2U6XG5cbiBQdWNrLndyaXRlKCdMRUQxLnNldCgpXFxuJylcblxuIEV4ZWN1dGUgZXhwcmVzc2lvbiBhbmQgcmV0dXJuIHRoZSByZXN1bHQ6XG5cbiBQdWNrLmV2YWwoJ0JUTi5yZWFkKCknLCBmdW5jdGlvbihkKSB7XG4gYWxlcnQoZCk7XG4gfSk7XG5cbiBPciB3cml0ZSBhbmQgd2FpdCBmb3IgYSByZXN1bHQgLSB0aGlzIHdpbGwgcmV0dXJuIGFsbCBjaGFyYWN0ZXJzLFxuIGluY2x1ZGluZyBlY2hvIGFuZCBsaW5lZmVlZCBmcm9tIHRoZSBSRVBMIHNvIHlvdSBtYXkgd2FudCB0byBzZW5kXG4gYGVjaG8oMClgIGFuZCB1c2UgYGNvbnNvbGUubG9nYCB3aGVuIGRvaW5nIHRoaXMuXG5cbiBQdWNrLndyaXRlKCcxKzJcXG4nLCBmdW5jdGlvbihkKSB7XG4gYWxlcnQoZCk7XG4gfSk7XG5cbiBPciBtb3JlIGFkdmFuY2VkIHVzYWdlIHdpdGggY29udHJvbCBvZiB0aGUgY29ubmVjdGlvblxuIC0gYWxsb3dzIG11bHRpcGxlIGNvbm5lY3Rpb25zXG5cbiBQdWNrLmNvbm5lY3QoZnVuY3Rpb24oY29ubmVjdGlvbikge1xuIGlmICghY29ubmVjdGlvbikgdGhyb3cgJ0Vycm9yISc7XG4gY29ubmVjdGlvbi5vbignZGF0YScsIGZ1bmN0aW9uKGQpIHsgLi4uIH0pO1xuIGNvbm5lY3Rpb24ub24oJ2Nsb3NlJywgZnVuY3Rpb24oKSB7IC4uLiB9KTtcbiBjb25uZWN0aW9uLndyaXRlKCcxKzJcXG4nLCBmdW5jdGlvbigpIHtcbiBjb25uZWN0aW9uLmNsb3NlKCk7XG4gfSk7XG4gfSk7XG5cbiAqL1xuY29uc3QgUHVjayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVycm9yU3RyLCBlcnJvclVSTDtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciA9PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuXG4gICAgZnVuY3Rpb24gY2hlY2tJZlN1cHBvcnRlZCgpIHtcbiAgICAgICAgLy8gSGFjayBmb3Igd2luZG93c1xuICAgICAgICBpZiAobmF2aWdhdG9yLnBsYXRmb3JtLmluZGV4T2YoJ1dpbicpID49IDAgJiZcbiAgICAgICAgICAgIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS81NCcpID49IDAgfHxcbiAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzU1JykgPj0gMCB8fFxuICAgICAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNTYnKSA+PSAwKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ2hyb21lIDw1NiBpbiBXaW5kb3dzIGhhcyBuYXZpZ2F0b3IuYmx1ZXRvb3RoIGJ1dCBpdFxcJ3Mgbm90IGltcGxlbWVudGVkIHByb3Blcmx5Jyk7XG4gICAgICAgICAgICBpZiAoY29uZmlybSgnV2ViIEJsdWV0b290aCBvbiBXaW5kb3dzIGlzIG5vdCB5ZXQgYXZhaWxhYmxlLlxcblBsZWFzZSBjbGljayBPayB0byBzZWUgb3RoZXIgb3B0aW9ucyBmb3IgdXNpbmcgV2ViIEJsdWV0b290aCcpKVxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICdodHRwczovL3d3dy5lc3BydWluby5jb20vUHVjay5qcytRdWljaytTdGFydCc7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5hdmlnYXRvci5ibHVldG9vdGgpIHJldHVybiB0cnVlO1xuICAgICAgICBjb25zb2xlLndhcm4oJ05vIFdlYiBCbHVldG9vdGggb24gdGhpcyBwbGF0Zm9ybScpO1xuICAgICAgICBjb25zdCBpT1MgPSAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtO1xuICAgICAgICBpZiAoaU9TKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlybSgnVG8gdXNlIFdlYiBCbHVldG9vdGggb24gaU9TIHlvdVxcJ2xsIG5lZWQgdGhlIFdlYkJMRSBBcHAuXFxuUGxlYXNlIGNsaWNrIE9rIHRvIGdvIHRvIHRoZSBBcHAgU3RvcmUgYW5kIGRvd25sb2FkIGl0LicpKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gJ2h0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS91cy9hcHAvd2ViYmxlL2lkMTE5MzUzMTA3Myc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY29uZmlybSgnVGhpcyBXZWIgQnJvd3NlciBkb2VzblxcJ3Qgc3VwcG9ydCBXZWIgQmx1ZXRvb3RoLlxcblBsZWFzZSBjbGljayBPayB0byBzZWUgaW5zdHJ1Y3Rpb25zIGZvciBlbmFibGluZyBpdC4nKSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICdodHRwczovL3d3dy5lc3BydWluby5jb20vUHVjay5qcytRdWljaytTdGFydCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IE5PUkRJQ19TRVJWSUNFID0gJzZlNDAwMDAxLWI1YTMtZjM5My1lMGE5LWU1MGUyNGRjY2E5ZSc7XG4gICAgY29uc3QgTk9SRElDX1RYID0gJzZlNDAwMDAyLWI1YTMtZjM5My1lMGE5LWU1MGUyNGRjY2E5ZSc7XG4gICAgY29uc3QgTk9SRElDX1JYID0gJzZlNDAwMDAzLWI1YTMtZjM5My1lMGE5LWU1MGUyNGRjY2E5ZSc7XG4gICAgY29uc3QgQ0hVTktTSVpFID0gMTY7XG5cbiAgICBmdW5jdGlvbiBsb2cobGV2ZWwsIHMpIHtcbiAgICAgICAgaWYgKHB1Y2subG9nKSBwdWNrLmxvZyhsZXZlbCwgcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWIyc3RyKGJ1Zikge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShidWYpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHIyYWIoc3RyKSB7XG4gICAgICAgIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIoc3RyLmxlbmd0aCk7XG4gICAgICAgIHZhciBidWZWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHN0ckxlbiA9IHN0ci5sZW5ndGg7IGkgPCBzdHJMZW47IGkrKykge1xuICAgICAgICAgICAgYnVmVmlld1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjb25uZWN0KGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghY2hlY2tJZlN1cHBvcnRlZCgpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSB7XG4gICAgICAgICAgICBvbjogZnVuY3Rpb24gKGV2dCwgY2IpIHtcbiAgICAgICAgICAgICAgICB0aGlzWydvbicgKyBldnRdID0gY2I7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW1pdDogZnVuY3Rpb24gKGV2dCwgZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzWydvbicgKyBldnRdKSB0aGlzWydvbicgKyBldnRdKGRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzT3BlbjogZmFsc2UsXG4gICAgICAgICAgICBpc09wZW5pbmc6IHRydWUsXG4gICAgICAgICAgICB0eEluUHJvZ3Jlc3M6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHZhciBidFNlcnZlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGJ0U2VydmljZTtcbiAgICAgICAgdmFyIGNvbm5lY3Rpb25EaXNjb25uZWN0Q2FsbGJhY2s7XG4gICAgICAgIHZhciB0eENoYXJhY3RlcmlzdGljO1xuICAgICAgICB2YXIgcnhDaGFyYWN0ZXJpc3RpYztcbiAgICAgICAgdmFyIHR4RGF0YVF1ZXVlID0gW107XG5cbiAgICAgICAgY29ubmVjdGlvbi5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uaXNPcGVuaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbi5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uZW1pdCgnY2xvc2UnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidFNlcnZlcikge1xuICAgICAgICAgICAgICAgIGJ0U2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICBidFNlcnZlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0eENoYXJhY3RlcmlzdGljID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHJ4Q2hhcmFjdGVyaXN0aWMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29ubmVjdGlvbi53cml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHR4RGF0YVF1ZXVlLnB1c2goe2RhdGE6IGRhdGEsIGNhbGxiYWNrOiBjYWxsYmFja30pO1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uaXNPcGVuICYmICFjb25uZWN0aW9uLnR4SW5Qcm9ncmVzcykgd3JpdGVDaHVuaygpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB3cml0ZUNodW5rKCkge1xuICAgICAgICAgICAgICAgIHZhciBjaHVuaztcbiAgICAgICAgICAgICAgICBpZiAoIXR4RGF0YVF1ZXVlLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciB0eEl0ZW0gPSB0eERhdGFRdWV1ZVswXTtcbiAgICAgICAgICAgICAgICBpZiAodHhJdGVtLmRhdGEubGVuZ3RoIDw9IENIVU5LU0laRSkge1xuICAgICAgICAgICAgICAgICAgICBjaHVuayA9IHR4SXRlbS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICB0eEl0ZW0uZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaHVuayA9IHR4SXRlbS5kYXRhLnN1YnN0cigwLCBDSFVOS1NJWkUpO1xuICAgICAgICAgICAgICAgICAgICB0eEl0ZW0uZGF0YSA9IHR4SXRlbS5kYXRhLnN1YnN0cihDSFVOS1NJWkUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnR4SW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgbG9nKDIsICdTZW5kaW5nICcgKyBKU09OLnN0cmluZ2lmeShjaHVuaykpO1xuICAgICAgICAgICAgICAgIHR4Q2hhcmFjdGVyaXN0aWMud3JpdGVWYWx1ZShzdHIyYWIoY2h1bmspKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nKDMsICdTZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHhJdGVtLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4RGF0YVF1ZXVlLnNoaWZ0KCk7IC8vIHJlbW92ZSB0aGlzIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eEl0ZW0uY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHhJdGVtLmNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi50eEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVDaHVuaygpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBsb2coMSwgJ1NFTkQgRVJST1I6ICcgKyBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHR4RGF0YVF1ZXVlID0gW107XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBuYXZpZ2F0b3IuYmx1ZXRvb3RoLnJlcXVlc3REZXZpY2Uoe1xuICAgICAgICAgICAgZmlsdGVyczogW1xuICAgICAgICAgICAgICAgIHtuYW1lUHJlZml4OiAnRmxhc2snfSxcbiAgICAgICAgICAgICAgICB7bmFtZVByZWZpeDogJ0VzcHJ1aW5vJ30sXG4gICAgICAgICAgICAgICAge3NlcnZpY2VzOiBbTk9SRElDX1NFUlZJQ0VdfVxuICAgICAgICAgICAgXSwgb3B0aW9uYWxTZXJ2aWNlczogW05PUkRJQ19TRVJWSUNFXVxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkZXZpY2UpIHtcbiAgICAgICAgICAgIGxvZygxLCAnRGV2aWNlIE5hbWU6ICAgICAgICcgKyBkZXZpY2UubmFtZSk7XG4gICAgICAgICAgICBsb2coMSwgJ0RldmljZSBJRDogICAgICAgICAnICsgZGV2aWNlLmlkKTtcbiAgICAgICAgICAgIC8vIFdhcyBkZXByZWNhdGVkOiBTaG91bGQgdXNlIGdldFByaW1hcnlTZXJ2aWNlcyBmb3IgdGhpcyBpbiBmdXR1cmVcbiAgICAgICAgICAgIGxvZygnQlQ+ICBEZXZpY2UgVVVJRHM6ICAgICAgJyArIGRldmljZS51dWlkcyk7XG4gICAgICAgICAgICBkZXZpY2UuYWRkRXZlbnRMaXN0ZW5lcignZ2F0dHNlcnZlcmRpc2Nvbm5lY3RlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBsb2coMSwgJ0Rpc2Nvbm5lY3RlZCAoZ2F0dHNlcnZlcmRpc2Nvbm5lY3RlZCknKTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkZXZpY2UuZ2F0dC5jb25uZWN0KCk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNlcnZlcikge1xuICAgICAgICAgICAgbG9nKDEsICdDb25uZWN0ZWQnKTtcbiAgICAgICAgICAgIGJ0U2VydmVyID0gc2VydmVyO1xuICAgICAgICAgICAgcmV0dXJuIHNlcnZlci5nZXRQcmltYXJ5U2VydmljZShOT1JESUNfU0VSVklDRSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNlcnZpY2UpIHtcbiAgICAgICAgICAgIGxvZygyLCAnR290IHNlcnZpY2UnKTtcbiAgICAgICAgICAgIGJ0U2VydmljZSA9IHNlcnZpY2U7XG4gICAgICAgICAgICByZXR1cm4gYnRTZXJ2aWNlLmdldENoYXJhY3RlcmlzdGljKE5PUkRJQ19SWCk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNoYXJhY3RlcmlzdGljKSB7XG4gICAgICAgICAgICByeENoYXJhY3RlcmlzdGljID0gY2hhcmFjdGVyaXN0aWM7XG4gICAgICAgICAgICBsb2coMiwgJ1JYIGNoYXJhY3RlcmlzdGljOicgKyBKU09OLnN0cmluZ2lmeShyeENoYXJhY3RlcmlzdGljKSk7XG4gICAgICAgICAgICByeENoYXJhY3RlcmlzdGljLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYXJhY3RlcmlzdGljdmFsdWVjaGFuZ2VkJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlLmJ1ZmZlcjsgLy8gZ2V0IGFycmF5YnVmZmVyXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5lbWl0KCdkYXRhJywgYWIyc3RyKHZhbHVlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByeENoYXJhY3RlcmlzdGljLnN0YXJ0Tm90aWZpY2F0aW9ucygpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBidFNlcnZpY2UuZ2V0Q2hhcmFjdGVyaXN0aWMoTk9SRElDX1RYKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoY2hhcmFjdGVyaXN0aWMpIHtcbiAgICAgICAgICAgIHR4Q2hhcmFjdGVyaXN0aWMgPSBjaGFyYWN0ZXJpc3RpYztcbiAgICAgICAgICAgIGxvZygyLCAnVFggY2hhcmFjdGVyaXN0aWM6JyArIEpTT04uc3RyaW5naWZ5KHR4Q2hhcmFjdGVyaXN0aWMpKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnR4SW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5pc09wZW4gPSB0cnVlO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5pc09wZW5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5lbWl0KCdvcGVuJyk7XG4gICAgICAgICAgICAvLyBpZiB3ZSBoYWQgYW55IHdyaXRlcyBxdWV1ZWQsIGRvIHRoZW0gbm93XG4gICAgICAgICAgICBjb25uZWN0aW9uLndyaXRlKCk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgbG9nKDEsICdFUlJPUjogJyArIGVycm9yKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgIH07XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdmFyIGNvbm5lY3Rpb247XG4gICAgLyogY29udmVuaWVuY2UgZnVuY3Rpb24uLi4gV3JpdGUgZGF0YSwgY2FsbCB0aGUgY2FsbGJhY2sgd2l0aCBkYXRhOlxuICAgICBjYWxsYmFja05ld2xpbmUgPSBmYWxzZSA9PiBpZiBubyBuZXcgZGF0YSByZWNlaXZlZCBmb3IgfjAuNSBzZWNcbiAgICAgY2FsbGJhY2tOZXdsaW5lID0gdHJ1ZSA9PiBhZnRlciBhIG5ld2xpbmUgKi9cbiAgICBmdW5jdGlvbiB3cml0ZShkYXRhLCBjYWxsYmFjaywgY2FsbGJhY2tOZXdsaW5lKSB7XG4gICAgICAgIGlmICghY2hlY2tJZlN1cHBvcnRlZCgpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGNiVGltZW91dDtcblxuICAgICAgICBmdW5jdGlvbiBvbldyaXR0ZW4oKSB7XG4gICAgICAgICAgICBpc1dyaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja05ld2xpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jYiA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3TGluZUlkeCA9IGNvbm5lY3Rpb24ucmVjZWl2ZWQuaW5kZXhPZignXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3TGluZUlkeCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBjb25uZWN0aW9uLnJlY2VpdmVkLnN1YnN0cigwLCBuZXdMaW5lSWR4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnJlY2VpdmVkID0gY29ubmVjdGlvbi5yZWNlaXZlZC5zdWJzdHIobmV3TGluZUlkeCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uY2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNiVGltZW91dCkgY2xlYXJUaW1lb3V0KGNiVGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2JUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHdhaXQgZm9yIGFueSByZWNlaXZlZCBkYXRhIGlmIHdlIGhhdmUgYSBjYWxsYmFjay4uLlxuICAgICAgICAgICAgICAgIHZhciB3YWl0VGltZSA9IDEwO1xuICAgICAgICAgICAgICAgIHZhciBtYXhUaW1lID0gd2FpdFRpbWU7XG4gICAgICAgICAgICAgICAgY2JUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkge1xuICAgICAgICAgICAgICAgICAgICBjYlRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoY29ubmVjdGlvbi5oYWREYXRhIHx8IG1heFRpbWUgPT0gd2FpdFRpbWUpICYmIG1heFRpbWUtLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2JUaW1lb3V0ID0gc2V0VGltZW91dCh0aW1lb3V0LCAyNTApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jYiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhjb25uZWN0aW9uLnJlY2VpdmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ucmVjZWl2ZWQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmhhZERhdGEgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9LCAyNTApO1xuICAgICAgICAgICAgfSBlbHNlIGNvbm5lY3Rpb24ucmVjZWl2ZWQgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25uZWN0aW9uICYmIChjb25uZWN0aW9uLmlzT3BlbiB8fCBjb25uZWN0aW9uLmlzT3BlbmluZykpIHtcbiAgICAgICAgICAgIGlmICghY29ubmVjdGlvbi50eEluUHJvZ3Jlc3MpIGNvbm5lY3Rpb24ucmVjZWl2ZWQgPSAnJztcbiAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLndyaXRlKGRhdGEsIG9uV3JpdHRlbik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25uZWN0aW9uID0gY29ubmVjdChmdW5jdGlvbiAocHVjaykge1xuICAgICAgICAgICAgaWYgKCFwdWNrKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbm5lY3Rpb24ucmVjZWl2ZWQgPSAnJztcbiAgICAgICAgICAgIGNvbm5lY3Rpb24ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ucmVjZWl2ZWQgKz0gZDtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmhhZERhdGEgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLmNiKSBjb25uZWN0aW9uLmNiKGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25uZWN0aW9uLm9uKCdjbG9zZScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY29ubmVjdGlvbi53cml0ZShkYXRhLCBvbldyaXR0ZW4pO1xuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIHZhciBwdWNrID0ge1xuICAgICAgICAvLy8gQXJlIHdlIHdyaXRpbmcgZGVidWcgaW5mb3JtYXRpb24/IDAgaXMgbm8sIDEgaXMgc29tZSwgMiBpcyBtb3JlLCAzIGlzIGFsbC5cbiAgICAgICAgZGVidWc6IDEsXG4gICAgICAgIC8vLyBVc2VkIGludGVybmFsbHkgdG8gd3JpdGUgbG9nIGluZm9ybWF0aW9uIC0geW91IGNhbiByZXBsYWNlIHRoaXMgd2l0aCB5b3VyIG93biBmdW5jdGlvblxuICAgICAgICBsb2c6IGZ1bmN0aW9uIChsZXZlbCwgcykge1xuICAgICAgICAgICAgaWYgKGxldmVsIDw9IHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKCc8QkxFPiAnICsgcylcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIENvbm5lY3QgdG8gYSBuZXcgZGV2aWNlIC0gdGhpcyBjcmVhdGVzIGEgc2VwYXJhdGVcbiAgICAgICAgIGNvbm5lY3Rpb24gdG8gdGhlIG9uZSBgd3JpdGVgIGFuZCBgZXZhbGAgdXNlLiAqL1xuICAgICAgICBjb25uZWN0OiBjb25uZWN0LFxuICAgICAgICAvLy8gV3JpdGUgdG8gUHVjay5qcyBhbmQgY2FsbCBiYWNrIHdoZW4gdGhlIGRhdGEgaXMgd3JpdHRlbi4gIENyZWF0ZXMgYSBjb25uZWN0aW9uIGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgd3JpdGU6IHdyaXRlLFxuICAgICAgICAvLy8gRXZhbHVhdGUgYW4gZXhwcmVzc2lvbiBhbmQgY2FsbCBjYiB3aXRoIHRoZSByZXN1bHQuIENyZWF0ZXMgYSBjb25uZWN0aW9uIGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgZXZhbDogZnVuY3Rpb24gKGV4cHIsIGNiKSB7XG4gICAgICAgICAgICBpZiAoIWNoZWNrSWZTdXBwb3J0ZWQoKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICB3cml0ZSgnXFx4MTBCbHVldG9vdGgucHJpbnRsbihKU09OLnN0cmluZ2lmeSgnICsgZXhwciArICcpKVxcbicsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGQgIT09IG51bGwpIGNiKEpTT04ucGFyc2UoZCkpOyBlbHNlIGNiKG51bGwpO1xuICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vLyBEaWQgYHdyaXRlYCBhbmQgYGV2YWxgIG1hbmFnZSB0byBjcmVhdGUgYSBjb25uZWN0aW9uP1xuICAgICAgICBpc0Nvbm5lY3RlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb24gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8vIGdldCB0aGUgY29ubmVjdGlvbiB1c2VkIGJ5IGB3cml0ZWAgYW5kIGBldmFsYFxuICAgICAgICBnZXRDb25uZWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgLy8vIENsb3NlIHRoZSBjb25uZWN0aW9uIHVzZWQgYnkgYHdyaXRlYCBhbmQgYGV2YWxgXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbilcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBwdWNrO1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgUHVjaztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/puck.js\n");

/***/ })

})