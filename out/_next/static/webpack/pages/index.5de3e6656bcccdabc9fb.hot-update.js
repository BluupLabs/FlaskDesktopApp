webpackHotUpdate_N_E("pages/index",{

/***/ "./lib/puck.js":
/*!*********************!*\
  !*** ./lib/puck.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* eslint-disable */\n\n/*\n --------------------------------------------------------------------\n Puck.js BLE Interface library\n Copyright 2016 Gordon Williams (gw@pur3.co.uk)\n --------------------------------------------------------------------\n This Source Code Form is subject to the terms of the Mozilla Public\n License, v. 2.0. If a copy of the MPL was not distributed with this\n file, You can obtain one at http://mozilla.org/MPL/2.0/.\n --------------------------------------------------------------------\n This creates a 'Puck' object that can be used from the Web Browser.\n\n Simple usage:\n\n Puck.write('LED1.set()\\n')\n\n Execute expression and return the result:\n\n Puck.eval('BTN.read()', function(d) {\n alert(d);\n });\n\n Or write and wait for a result - this will return all characters,\n including echo and linefeed from the REPL so you may want to send\n `echo(0)` and use `console.log` when doing this.\n\n Puck.write('1+2\\n', function(d) {\n alert(d);\n });\n\n Or more advanced usage with control of the connection\n - allows multiple connections\n\n Puck.connect(function(connection) {\n if (!connection) throw 'Error!';\n connection.on('data', function(d) { ... });\n connection.on('close', function() { ... });\n connection.write('1+2\\n', function() {\n connection.close();\n });\n });\n\n */\nvar Puck = function () {\n  var errorStr, errorURL;\n  if (typeof navigator == 'undefined') return;\n\n  function checkIfSupported() {\n    // Hack for windows\n    if (navigator.platform.indexOf('Win') >= 0 && (navigator.userAgent.indexOf('Chrome/54') >= 0 || navigator.userAgent.indexOf('Chrome/55') >= 0 || navigator.userAgent.indexOf('Chrome/56') >= 0)) {\n      console.warn('Chrome <56 in Windows has navigator.bluetooth but it\\'s not implemented properly');\n      if (confirm('Web Bluetooth on Windows is not yet available.\\nPlease click Ok to see other options for using Web Bluetooth')) window.location = 'https://www.espruino.com/Puck.js+Quick+Start';\n      return false;\n    }\n\n    if (navigator.bluetooth) return true;\n    console.warn('No Web Bluetooth on this platform');\n    var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n    if (iOS) {\n      if (confirm('To use Web Bluetooth on iOS you\\'ll need the WebBLE App.\\nPlease click Ok to go to the App Store and download it.')) {\n        window.location = 'https://itunes.apple.com/us/app/webble/id1193531073';\n      }\n    } else {\n      if (confirm('This Web Browser doesn\\'t support Web Bluetooth.\\nPlease click Ok to see instructions for enabling it.')) {\n        window.location = 'https://www.espruino.com/Puck.js+Quick+Start';\n      }\n    }\n\n    return false;\n  }\n\n  var NORDIC_SERVICE = '6e400001-b5a3-f393-e0a9-e50e24dcca9e';\n  var NORDIC_TX = '6e400002-b5a3-f393-e0a9-e50e24dcca9e';\n  var NORDIC_RX = '6e400003-b5a3-f393-e0a9-e50e24dcca9e';\n  var CHUNKSIZE = 16;\n\n  function log(level, s) {\n    if (puck.log) puck.log(level, s);\n  }\n\n  function ab2str(buf) {\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\n  }\n\n  function str2ab(str) {\n    var buf = new ArrayBuffer(str.length);\n    var bufView = new Uint8Array(buf);\n\n    for (var i = 0, strLen = str.length; i < strLen; i++) {\n      bufView[i] = str.charCodeAt(i);\n    }\n\n    return buf;\n  }\n\n  function connect(callback) {\n    if (!checkIfSupported()) return;\n    var connection = {\n      on: function on(evt, cb) {\n        this['on' + evt] = cb;\n      },\n      emit: function emit(evt, data) {\n        if (this['on' + evt]) this['on' + evt](data);\n      },\n      isOpen: false,\n      isOpening: true,\n      txInProgress: false\n    };\n    var btServer = undefined;\n    var btService;\n    var connectionDisconnectCallback;\n    var txCharacteristic;\n    var rxCharacteristic;\n    var txDataQueue = [];\n\n    connection.close = function () {\n      connection.isOpening = false;\n\n      if (connection.isOpen) {\n        connection.isOpen = false;\n        connection.emit('close');\n      } else {\n        if (callback) callback(null);\n      }\n\n      if (btServer) {\n        btServer.disconnect();\n        btServer = undefined;\n        txCharacteristic = undefined;\n        rxCharacteristic = undefined;\n      }\n    };\n\n    connection.write = function (data, callback) {\n      if (data) txDataQueue.push({\n        data: data,\n        callback: callback\n      });\n      if (connection.isOpen && !connection.txInProgress) writeChunk();\n\n      function writeChunk() {\n        var chunk;\n        if (!txDataQueue.length) return;\n        var txItem = txDataQueue[0];\n\n        if (txItem.data.length <= CHUNKSIZE) {\n          chunk = txItem.data;\n          txItem.data = undefined;\n        } else {\n          chunk = txItem.data.substr(0, CHUNKSIZE);\n          txItem.data = txItem.data.substr(CHUNKSIZE);\n        }\n\n        connection.txInProgress = true;\n        log(2, 'Sending ' + JSON.stringify(chunk));\n        txCharacteristic.writeValue(str2ab(chunk)).then(function () {\n          log(3, 'Sent');\n\n          if (!txItem.data) {\n            txDataQueue.shift(); // remove this element\n\n            if (txItem.callback) txItem.callback();\n          }\n\n          connection.txInProgress = false;\n          writeChunk();\n        })[\"catch\"](function (error) {\n          log(1, 'SEND ERROR: ' + error);\n          txDataQueue = [];\n          connection.close();\n        });\n      }\n    };\n\n    navigator.bluetooth.requestDevice({\n      filters: [{\n        namePrefix: 'Flask'\n      }, {\n        namePrefix: 'Espruino'\n      }, {\n        services: [NORDIC_SERVICE]\n      }],\n      optionalServices: [NORDIC_SERVICE]\n    }).then(function (device) {\n      log(1, 'Device Name:       ' + device.name);\n      log(1, 'Device ID:         ' + device.id); // Was deprecated: Should use getPrimaryServices for this in future\n      //log('BT>  Device UUIDs:      ' + device.uuids.join('\\n' + ' '.repeat(21)));\n\n      device.addEventListener('gattserverdisconnected', function () {\n        log(1, 'Disconnected (gattserverdisconnected)');\n        connection.close();\n      });\n      return device.gatt.connect();\n    }).then(function (server) {\n      log(1, 'Connected');\n      btServer = server;\n      return server.getPrimaryService(NORDIC_SERVICE);\n    }).then(function (service) {\n      log(2, 'Got service');\n      btService = service;\n      return btService.getCharacteristic(NORDIC_RX);\n    }).then(function (characteristic) {\n      rxCharacteristic = characteristic;\n      log(2, 'RX characteristic:' + JSON.stringify(rxCharacteristic));\n      rxCharacteristic.addEventListener('characteristicvaluechanged', function (event) {\n        var value = event.target.value.buffer; // get arraybuffer\n\n        connection.emit('data', ab2str(value));\n      });\n      return rxCharacteristic.startNotifications();\n    }).then(function () {\n      return btService.getCharacteristic(NORDIC_TX);\n    }).then(function (characteristic) {\n      txCharacteristic = characteristic;\n      log(2, 'TX characteristic:' + JSON.stringify(txCharacteristic));\n    }).then(function () {\n      connection.txInProgress = false;\n      connection.isOpen = true;\n      connection.isOpening = false;\n      callback(connection);\n      connection.emit('open'); // if we had any writes queued, do them now\n\n      connection.write();\n    })[\"catch\"](function (error) {\n      log(1, 'ERROR: ' + error);\n      connection.close();\n    });\n    return connection;\n  }\n\n  ; // ----------------------------------------------------------\n\n  var connection;\n  /* convenience function... Write data, call the callback with data:\n   callbackNewline = false => if no new data received for ~0.5 sec\n   callbackNewline = true => after a newline */\n\n  function write(data, callback, callbackNewline) {\n    if (!checkIfSupported()) return;\n    var cbTimeout;\n\n    function onWritten() {\n      isWriting = false;\n\n      if (callback) {\n        if (callbackNewline) {\n          connection.cb = function (d) {\n            var newLineIdx = connection.received.indexOf('\\n');\n\n            if (newLineIdx >= 0) {\n              var l = connection.received.substr(0, newLineIdx);\n              connection.received = connection.received.substr(newLineIdx + 1);\n              connection.cb = undefined;\n              if (cbTimeout) clearTimeout(cbTimeout);\n              cbTimeout = undefined;\n              if (callback) callback(l);\n            }\n          };\n        } // wait for any received data if we have a callback...\n\n\n        var waitTime = 10;\n        var maxTime = waitTime;\n        cbTimeout = setTimeout(function timeout() {\n          cbTimeout = undefined;\n\n          if ((connection.hadData || maxTime == waitTime) && maxTime--) {\n            cbTimeout = setTimeout(timeout, 250);\n          } else {\n            connection.cb = undefined;\n            if (callback) callback(connection.received);\n            connection.received = '';\n          }\n\n          connection.hadData = false;\n        }, 250);\n      } else connection.received = '';\n    }\n\n    if (connection && (connection.isOpen || connection.isOpening)) {\n      if (!connection.txInProgress) connection.received = '';\n      return connection.write(data, onWritten);\n    }\n\n    connection = connect(function (puck) {\n      if (!puck) {\n        connection = undefined;\n        if (callback) callback(null);\n        return;\n      }\n\n      connection.received = '';\n      connection.on('data', function (d) {\n        connection.received += d;\n        connection.hadData = true;\n        if (connection.cb) connection.cb(d);\n      });\n      connection.on('close', function (d) {\n        connection = undefined;\n      });\n    });\n    connection.write(data, onWritten);\n  } // ----------------------------------------------------------\n\n\n  var puck = {\n    /// Are we writing debug information? 0 is no, 1 is some, 2 is more, 3 is all.\n    debug: 1,\n    /// Used internally to write log information - you can replace this with your own function\n    log: function log(level, s) {\n      if (level <= this.debug) console.log('<BLE> ' + s);\n    },\n\n    /** Connect to a new device - this creates a separate\n     connection to the one `write` and `eval` use. */\n    connect: connect,\n    /// Write to Puck.js and call back when the data is written.  Creates a connection if it doesn't exist\n    write: write,\n    /// Evaluate an expression and call cb with the result. Creates a connection if it doesn't exist\n    eval: function _eval(expr, cb) {\n      if (!checkIfSupported()) return;\n      write('\\x10Bluetooth.println(JSON.stringify(' + expr + '))\\n', function (d) {\n        if (d !== null) cb(JSON.parse(d));else cb(null);\n      }, true);\n    },\n    /// Did `write` and `eval` manage to create a connection?\n    isConnected: function isConnected() {\n      return connection !== undefined;\n    },\n    /// get the connection used by `write` and `eval`\n    getConnection: function getConnection() {\n      return connection;\n    },\n    /// Close the connection used by `write` and `eval`\n    close: function close() {\n      if (connection) connection.close();\n    }\n  };\n  return puck;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Puck);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/puck.js\n");

/***/ })

})